<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="GroupElementsSection" type="TestLibrary.Config.GroupElementsSection, TestLibrary"/>
    <section name="TestElementsSection" type="TestLibrary.Config.TestElementsSection, TestLibrary"/>
  </configSections>
  <appSettings>
    <!-- Standard TestLibrary Logger configuation settings, specific to the Logger sub-system.-->
    <add key="LOGGER_FileEnabled" value="true"/>
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
    <!-- Can choose to Log to Rich Text only, SQL only, both Rich Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_FilePath" value="H:\My Documents\Test Program"/>
    <!-- Rich Text Log Paths are only relevant if LOGGER_FileEnabled is true. -->
    <!-- Windows file/folder permissions to create, read, write & search in LOGGER_FilePath are required. -->
    <add key="LOGGER_SQLEnabled" value="false"/>
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
    <!-- Can choose to Log to Rich Text only, SQL only, both Rich Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_SQLConnectionString" value=""/>
    <!--  SQL connection string only relevant if LOGGER_SQLEnabled is true. -->
    <add key="LOGGER_TestEventsEnabled" value="true"/>
    <!-- See https://github.com/Amphenol-Borisch-Technologies/TestEvents -->
    <!-- Standard TestLibrary UUT configuration settings, specific to the Unit Under Test. -->
    <add key="UUT_Customer" value="UUT_Customer"/>
    <add key="UUT_Type" value="UUT_Type"/>
    <!-- Recommended choices: { System, Unit, CCA, Component }. -->
    <add key="UUT_Number" value="UUT_Number"/>
    <add key="UUT_Revision" value="UUT_Revision"/>
    <add key="UUT_Description" value="UUT_Description"/>
	  <add key="UUT_TestSpecification" value="UUT_TestSpecification" />
	  <!-- When UUT_DocumentationFolder is a valid Windows folder path, File explorer will open the folder during TestLibrary.Form's Shown Event. -->
	  <!-- Provides convenient access to supplementary UUT or test documents that may be helpful when operating the test. -->
	  <!-- Examples are UUT test procedures, schematics, drawings, BOMs, work instructions, troubleshooting notes, etc. -->
	  <!-- Set UUT_DocumentationFolder to empty string "" to disable it's function. -->
	  <add key="UUT_DocumentationFolder" value="P:\Test\Workspace\eDocs\D\D4522137, Rev A"/>
	  <!-- Custom configuration settings specific to this APP, LOG or UUT, and not provided by their standard configurations from TestLibrary. -->
	  <!-- These settings should be initialized in a local library specific to the test program/application. -->
	  <add key="CUSTOM_SMBusAddress" value="40" />
    <!-- System Management Bus device address, in hexadecimal format. -->
  </appSettings>
  <GroupElementsSection>
    <!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- Suggest T-10, T-20, T-30... ABT FilePro Traveler Test Operations.
	Required:	Required field.
				- If Required = true, it's a Group of Tests the UUT's customer requires
					be executed & pass in order to ship the UUT.
				- Required Groups generally correspond to FilePro Traveler
					operations; T-10, T-20, T-30...
				- Multiple Groups can be required, if there are multiple
					FilePro Test Operations; T-10, T-20, T-30...
				- If Required = false, Group is a custom subset of Tests
					solely useful for troubleshooting UUTs that don't pass
					their Required Groups.
				- Non-required Groups don't create valid test data nor report
					overall UUT results, just their custom Group results.
				- Recommend ordering all Required Groups by Test Operation,
					then non-Required as desired.
				- Order of Group appearance in this App.config determines order of
					appearance when selecting Groups in GroupSelection ListView,
					so optimally order them in the sequence they're performed;
				    (T-10, T-20, T-30...)
	Revision:	Required field.
				- Revision of the Test Group's GroupElement.
				- Increment whenever any GroupElement field in Group changes; particularly when TestIDs are added or removed.
				- Add a comment to the GroupElement for each revision increment detailing modifications.
				  providing revision history
				- Essentially GroupElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Group; "FilePro T-10 Operation."
	Detail:-	Optional field.
				- Optional verbose description of Group:
				- "FilePro T-10 Operation:
					* Apply/measure +28.0 VDC.
					* Apply/measure +5.0 VDC.
					* Apply/measure +3.3 VDC.
					* Measure derived ±12.0 VDC
					* Measure derived +2.5 VDC
					* Measure derived +1.8 VDC
					* Measure derived +1.2 VDC"
	TestIDs:	Required field.
				- Tests in Group, *in order of execution*
				- 1 or more TestIDs from TestElements, separated by '|'.
				- Tests execute in *entry order*:
					- Entry "T03|T01|T02" executed in sequence (T03, T01, T02).
					- Entry "T01|T02|T03" executed in sequence (T01, T02, T03).
					- Entry "T02|T03|T01" executed in sequence (T02, T03, T01).
	-->
    <GroupElements>
		<!-- &#x9; is the tab character in XML format. -->
		<!-- &#xD is the carriage return character in XML format. -->
		<!-- &#xA; is the linefeed character in XML format. -->
		<!-- &#xD;&#xA; together comprise a standard Windows carriage return/linefeed in XML format. -->
		<!-- Above XML control characters embed tabs & carriage return/linefeeds into the Detail field's text. -->
		<!-- GroupElement Revisions 1.0 are initial releases. -->
		<GroupElement	ID="T-10"
						Revision="1.1"
						Required="true"
						Summary="FilePro T-10 Operation"
						Detail="&#x9;Test Pre-Coat&#xD;&#xA;&#x9;ISP&#xD;&#xA;&#x9;Bootup, Happy Lights"
						TestIDs="T00|T01|T02|T03|T04|T05|T06|T07|T09"/>
						<!-- T-10 Revision 1.1 added T9 per customer request.  11-Dec-2022, P. Smelt. -->
		<GroupElement	ID="T-20"
						Revision="1.1"
						Required="true"
						Summary="FilePro T-20 Operation"
						Detail="&#x9;Test Post-Coat&#xD;&#xA;&#x9;Calibration&#xD;&#xA;&#x9;Bootup, Happy Lights"
						TestIDs="T00|T01|T02|T03|T04|T05|T06|T08|T09"/>
					<!-- T-20 Revision 1.1 added T9 per customer request. 11-Dec-2022, P. Smelt -->
		<GroupElement	ID="Power"
						Revision="1.0"
						Required="false"
						Summary="Powered Troubleshooting"
						Detail="&#x9;Power UUT to troubleshoot"
						TestIDs="T00|T01|T02"/>
    </GroupElements>
  </GroupElementsSection>
  <TestElementsSection>
    <!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- T01, T02, T03...
				- *Must* also be a valid C# identifier; see 
				  https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names.
				- Recommend alpha-numerically ordering to avoid duplications,
				  which throw Exceptions.
				- Can be ordered as desired though; test execution order
				  *solely* determined by GroupElement TestIDs test ordering.
				- Cannot contain | character.
					- Using character '|' to separate GroupsToTestsElement IDTests.
					- Thus TestElement IDs cannot contain character '|' in them.
					- ID="T01 valid.
					- ID="T|1" invalid
	Revision:	Required field.
				- Revision of the Test's TestElement.
				- Increment whenever any TestElement field in Test changes; particularly
				  when LimitLow or LimitHigh are modified.
					- Typically will be set to "1.0" at initial release & left unchanged 
					  thereafter.
					- For most Customers & UUTs, this fine-grained revisioning will
					  be annoying, unnecessary overhead.
					- For some Customers or UUTs, however, it might be useful or even required.
				- Add a comment to the TestElement for each revision increment detailing modifications,
				  providing revision history
				- TestElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Test; "Apply/measure +5V DC Input Voltage pre-programming."
	Detail:		Optional field.
				- Optional verbose description of Test:
				"Powerup:
					* Limit current to 0.75 Amps.
					* Measure voltage after 2.0 seconds delay.
					* Perform test before U6 µController and U7 EEPROM are programmed."
	LimitLow:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's low limit; example "4.75", for a 5.0VDC power supply with -5% tolerance.
				- Parsed as Double.TryParse(LimitLow, NumberStyles.Float, CultureInfo.CurrentCulture, out dMeasurement);
				- https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse?view=net-7.0#system-double-tryparse(system-string-system-globalization-numberstyles-system-iformatprovider-system-double
				- https://learn.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-7.0#system-globalization-numberstyles-float
				- Scientific Notation allowed & encouraged:
					- 1.0E5 is valid instead of 100000.0.
					- 1.5E-5 is valid instead of 0.000015.
					- Postive/Negative +/- signs allowed in both exponent & significand:
					+1.0E+5 is valid for +100000.0.
						- Recommend 1.0E5 though.
					-1.0E5 is valid for -1000000.0.
					1.5E-5 is valid for 0.000015.
					-1.5E-5 is valid for -0.000015.
				- Int32 & Double both allowed:
					- 100000 & 100000.0 both valid.
				- Commas not allowed:
					- 100000 & 1000000 both valid.
					- 100,000 & 1,000,000 both invalid.
					- Recommend 1E5 and 1E6 instead.
	LimitHigh:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's high limit; example "5.25", for a 5.0VDC power supply with +5% tolerance.
				- Parsed identically as LimitLow.
	Units		Optional field.
				- SI Base & Derived Units:
					- Examples: A, V, F, H, Ω, S, °C, s, Hz, W, VA for respectively
					amperes, volts, farads, henries, ohms, siemens,
					°Celcius, seconds, hertz, watts, volt-amperes.
					https://en.wikipedia.org/wiki/SI_base_unit
					https://en.wikipedia.org/wiki/SI_derived_unit
					- Recommend "" when Units aren't applicable:
					- NOTE: do not use Metric prefixes:
						- That is, do not use micro, milli, kilo, mega, etc.
						  or their μ, m, k, M, etc. symbols either.
						- Instead, always normalize LimitLow & LimitHigh to
						  unitary SI Units without prefixes.
						- 10000 Ω is valid.
						- 10 kiloΩ or 10 kΩ invalid.
						- Again, recommend Scientific Notation when applicable.
					- NOTE: Units are purely cosmetic in function; they aren't used
					  to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					  only for reporting what Units their Test's measured values are in.
	UnitType	Optional field.
				- Recommend "" when UnitTypes aren't applicable.
				- Examples; AC, DC, Peak, PP, RMS respectively for Alternating Current,
				Direct Current, Peak, Peak-to-Peak, Root-Mean-Squared.
				- NOTE: UnitTypes are purely cosmetic in function; they aren't used
					to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					only for reporting metadata about the Units the tests measured
					values are in.

	And now, for the LimitLow & LimitHigh caveats:
	Invalid Tests:
		- LimitLow = LimitHigh = String.Empty.
		- LimitLow = String.Empty,	LimitHigh ≠ String.Empty, but won't parse to Double.
		- LimitHigh = String.Empty, LimitLow  ≠ String.Empty, but won't parse to Double.
		- LimitLow ≠ String.Empty,	LimitHigh ≠ String.Empty, neither parse to Double, & LimitLow ≠ LimitHigh.
		
	Valid Tests:
		- LimitLow < LimitHigh & both parse to Double:
			- Typical low & high limits, including a range of passing numeric measurements.
		- LimitLow > LimitHigh & both parse to Double:
			- Atypical low & high limits, excluding a range of measurements from passing..
			- Could test if a digital voltage is an acceptable TTL signal; LimitLow = 2.0, LimitHigh = 0.8
			  will pass if a digital voltage is not in the undefined TTL range of 0.8 to 2.0 VDC.
			- You'd also want additional tests to confirm the voltage was ≥ 0 and ≤ 5.0 though.
			- See "CUSTOM" Limits below.
		- LimitLow = LimitHigh & both parse to Double:
			- This simply means only the specific exact measurement passes.
			- *Not recommended* due to potential roundoff when parsing String Limits & instrument measurement inaccuracies.
			- Most (all) real-world measurements require non-zero tolerances.
		- LimitLow parses to Double, LimitHigh = String.Empty:
			- Only low limit, no high.
			- HiPot passes if ≥ 1E6 Ω.
		- LimitLow = String.Empty, LimitHigh parses to Double:
			- No low limit, only high.
			- Continuities pass if ≤ 5 Ω.
		- LimitLow = LimitHigh, both ≠ String.Empty, & neither parse to Double:
			- This is to verify specific checksums or CRCs, or to read specific non-numeric String contents from memory or a file, parse operator input, etc.
		- LimitLow = LimitHigh = "CUSTOM":
			- If multiple permissable results are required, say any String in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"} must pass:
			- Or multiple numeric ranges required, say any TTL Voltage V where (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0):
				- Set both LimitLow & LimitHigh to "CUSTOM".
				- Write custom code in your Test method to evaluate the Test's measurement:
					- If in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"}
					- Or (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0)
					- Then return EventCodes.PASS from your method, else return EventCodes.FAIL.
					- Or return any valid EventCode as applicable; e.g. EventCodes.CANCEL, EventCodes.ERROR or EventCodes.UNSET.
			- Finally, write custom code in your Test method to log the results in detail directly, using Serilog's Log.Information() method
			  rather than TestLibrary's default LogTasks.LogTest() method invoked from its Run() method.
				- Permits multiple measurements or operations to be performed & logged in a single Test, but with a *single* overall result.
				- Tradeoff is LimitLow/LimitHigh aren't defined or modifiable from this App.config file, only defined/modifiable in the Test's method.
		-->
    <TestElements>
		<!-- TestElement Revisions 1.0 are initial releases. -->
		<TestElement	ID="T00"	Revision="1.1"	Summary="Shorts"		Detail="Power to Ground	busses"		LimitLow="50"		LimitHigh=""		Units="Ω"	UnitType=""/>
		<!-- T00 Revision 1.1 LimitLow was 100Ω, now 50Ω. 8-Nov-2022, P. Smelt .-->
		<TestElement	ID="T01"	Revision="1.0"	Summary="+5VDC"			Detail="Applied +5VDC"				LimitLow="4.75"		LimitHigh="5.25"	Units="V"	UnitType="DC"/>
		<TestElement	ID="T02"	Revision="1.0"	Summary="+3.3VDC"		Detail="Applied +3.3VDC"			LimitLow="3.2"		LimitHigh="3.4"		Units="V"	UnitType="DC"/>
		<TestElement	ID="T03"	Revision="1.2"	Summary="Power"			Detail="Total Power"				LimitLow="0.8"		LimitHigh="1.2"		Units="W"	UnitType=""/>
		<!-- T03 Revision 1.1 LimitLow was 0.9W, now 0.8W.  15-Oct-2022, P. Smelt. -->
		<!-- T03 Revision 1.2 LimitHigh was 1.1W, now 1.2W. 21-Oct-2022, P. Smelt. -->
		<TestElement	ID="T04"	Revision="1.0"	Summary="+2.5VDC"		Detail="Derived 2.5VDC"				LimitLow="2.4"		LimitHigh="2.6"		Units="V"	UnitType="DC"/>
		<TestElement	ID="T05"	Revision="1.0"	Summary="+1.8VDC"		Detail="Derived 1.8VDC"				LimitLow="1.7"		LimitHigh="1.9"		Units="V"	UnitType="DC"/>
		<!-- T05 Revision 1.1 Limits were 1.75V/1,85V, now 1.7V/1.9V.  17-Nov-2022, P. Smelt. -->
		<TestElement	ID="T06"	Revision="1.0"	Summary="Clock"			Detail="U2 10Mzh"					LimitLow="0.999E6"	LimitHigh="1.001E7"	Units="Hz"	UnitType=""/>
		<TestElement	ID="T07"	Revision="1.0"	Summary="U6 ISP"		Detail="Flash U6"					LimitLow="CUSTOM"	LimitHigh="CUSTOM"	Units=""	UnitType=""/>
		<TestElement	ID="T08"	Revision="1.0"	Summary="Calibration"	Detail="Calibrate UUT"				LimitLow="CUSTOM"	LimitHigh="CUSTOM"	Units=""	UnitType=""/>
		<TestElement	ID="T09"	Revision="1.0"	Summary="Bootup"		Detail="Happy Lights"				LimitLow="CUSTOM"	LimitHigh="CUSTOM"	Units=""	UnitType=""/>
	</TestElements>
  </TestElementsSection>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Abstractions" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Identity.Client" publicKeyToken="0a613f4dd989e8ae" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.48.1.0" newVersion="4.48.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Azure.Core" publicKeyToken="92742159e12e44c8" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.26.0.0" newVersion="1.26.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Azure.Identity" publicKeyToken="92742159e12e44c8" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.8.0.0" newVersion="1.8.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Protocols.OpenIdConnect" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Protocols" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Tokens" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.IdentityModel.Tokens.Jwt" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.JsonWebTokens" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Logging" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.Configuration.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.Configuration.Binder" publicKeyToken="adb9793829ddae60" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory.Data" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Identity.Client.Extensions.Msal" publicKeyToken="0a613f4dd989e8ae" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.25.0.0" newVersion="2.25.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Security.Cryptography.ProtectedData" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="NuGet.Frameworks" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-5.11.3.1" newVersion="5.11.3.1"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Ivi.Driver" publicKeyToken="a128c98f1d7717c1" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.5.0.0" newVersion="1.5.0.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
  </startup>
</configuration>
